/*
 * Copyright (c) 2020. Aarre Laakso
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.aarrelaakso.drawl;

import com.aarrelaakso.drawl.test.DrawingTestShapePublic;
import org.assertj.core.api.BDDSoftAssertions;
import org.assertj.core.api.junit.jupiter.SoftAssertionsExtension;
import org.jetbrains.annotations.NotNull;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;

import java.util.concurrent.ThreadLocalRandom;

import static org.assertj.core.api.BDDAssertions.then;

@ExtendWith(SoftAssertionsExtension.class)
@TestMethodOrder(MethodOrderer.Alphanumeric.class)
@DisplayName("Unit tests of Drawing with Rectangle shapes")
public class DrawingTestRectangleProtected extends DrawingTestShapeProtected
{

    @BeforeEach
    @DisplayName("Given three default Rectangles")
    void givenTheeDefaultRectangles()
    {
        shape1 = new Rectangle();
        shape2 = new Rectangle();
        shape3 = new Rectangle();
        com.aarrelaakso.drawl.DrawingTestRectangleProtected.super.shape1 = shape1;
        com.aarrelaakso.drawl.DrawingTestRectangleProtected.super.shape2 = shape2;
        com.aarrelaakso.drawl.DrawingTestRectangleProtected.super.shape3 = shape3;
    }

    @Test
    @DisplayName("The SVG generated by a Shape contains the x- and y-coordinates")
    void thenTheSVGGeneratedByAShapeContainsXAndYCoordinates(@NotNull BDDSoftAssertions softly) {
        int x = 50;
        int y = 50;
        drawing.add(shape1);
        drawing.add(shape2);
        drawing.setExplicitDimensions(100,100);
        shape1.setExplicitXPositionCenter(x);
        shape1.setExplicitYPosition(y);
        String svg = drawing.getSVG();
        softly.then(svg).contains("x=\"0\"")
                .contains("y=\"0\"");
    }

    @Test
    @DisplayName("When an asymmetric rectangle is created with SisuBigDecimal dimensions, then it is not null")
    void whenAnAsymmetricRectangleIsCreatedWithSisuBigDecimalDimensionsThenItIsNotNull()
    {
        SisuBigDecimal height = SisuBigDecimal.valueOf(ThreadLocalRandom.current().nextDouble(Double.MAX_VALUE));
        SisuBigDecimal width = SisuBigDecimal.valueOf(ThreadLocalRandom.current().nextDouble(Double.MAX_VALUE));
        Rectangle rectangle = new Rectangle(width, height);
        then(rectangle).isNotNull();
    }

}