/*
 * Copyright (c) 2020. Aarre Laakso
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.aarrelaakso.drawl;

import org.assertj.core.api.BDDSoftAssertions;
import org.assertj.core.api.junit.jupiter.SoftAssertionsExtension;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;

import java.util.concurrent.ThreadLocalRandom;

import static org.assertj.core.api.BDDAssertions.then;

/**
 * Tests the protected API for Shapes on Drawings.
 */
@ExtendWith(SoftAssertionsExtension.class)
@TestMethodOrder(MethodOrderer.Alphanumeric.class)
@DisplayName("Tests the protected API for Shapes on Drawings")
public abstract class ShapeDrawingTestProtected
{
    Drawing drawing;
    Shape shape1;
    Shape shape2;
    Shape shape3;

    @BeforeEach
    void givenADrawing()
    {
        this.drawing = new Drawing();
    }

    @Test
    @DisplayName("The SVG generated by a Shape contains the correct x- and y-coordinates")
    void thenTheSVGGeneratedByAShapeContainsTheCorrectXAndYCoordinates(@NotNull final BDDSoftAssertions softly)
    {
        final int X = 50;
        final int Y = 50;
        if (this.shape1.getClass() == Text.class)
        {
            ((Text) this.shape1).setString("Drawl");
        }
        if (this.shape2.getClass() == Text.class)
        {
            ((Text) this.shape2).setString("Lward");
        }
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        this.drawing.setExplicitDimensions(100, 100);
        this.shape1.setExplicitXPositionCenter(X);
        this.shape1.setExplicitYPositionCenter(Y);
        @NotNull final String svg = this.drawing.getSVG();
        if (this.shape1.getClass() == Rectangle.class)
        {
            softly.then(svg).contains("x=\"0\"")
                    .contains("y=\"0\"");
        }
        else if (this.shape1.getClass() == Line.class)
        {
            softly.then(svg).contains("x1=\"0\"");
            softly.then(svg).contains("y1=\"100\"");
            softly.then(svg).contains("x2=\"100\"");
            softly.then(svg).contains("y2=\"0\"");
        }
        else
        {
            softly.then(svg).contains("x=\"" + X + "\"")
                    .contains("y=\"" + Y + "\"");
        }
    }

    @Test
    @DisplayName("WIDTH - IMPLICIT: When a drawing has one default Shape, the implicit width of the drawing is 1.0")
    void whenADrawingHasOneDefaultShapeThenTheImplicitWidthOfTheDrawingIs1()
    {

        this.drawing.add(this.shape1);
        final Number implicitWidth = this.drawing.getImplicitWidth();

        then(implicitWidth).isEqualTo(DrawlNumber.ONE);

    }

    @Test
    @DisplayName("WIDTH - IMPLICIT: When a drawing has one default Shape, the implicit width of the drawing's contents is 1.0")
    void whenADrawingHasOneDefaultShapeThenTheImplicitWidthOfTheDrawingsContentsIs1()
    {

        this.drawing.add(this.shape1);
        final Number implicitWidthOfContents = this.drawing.getImplicitWidthOfContents();

        then(implicitWidthOfContents).isEqualTo(DrawlNumber.ONE);
    }

    @Test
    @DisplayName("WIDTH - IMPLICIT: When a drawing has one default Shape, thebn the implicit width of the Shape is 1.0")
    void whenADrawingHasOneDefaultShapeThenTheImplicitWidthOfTheShapeIs1()

    {
        this.drawing.add(this.shape1);
        final Number implicitWidth = this.shape1.getImplicitWidth();

        then(implicitWidth).isEqualTo(DrawlNumber.ONE);
    }

    @Test
    @DisplayName("SVG: When a drawing has two default Circles, the implicit width of the contents is the same as when it has one")
    void whenADrawingHasTwoDefaultShapesThenTheImplicitWidthOfTheContentsIsTheSameAsWhenItHasOne()
    {
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        final Number implicitWidthOfContents = this.drawing.getImplicitWidthOfContents();

        then(implicitWidthOfContents).isEqualTo(DrawlNumber.ONE);
    }

    @Test
    @DisplayName("WIDTH - IMPLICIT: When a square (100) drawing has two adjacent Circles, then their implicit widths are correct")
    void whenASquare100DrawingHasTwoAdjacentCirclesThenTheirImplicitWidthsAreCorrect(final BDDSoftAssertions softly)
    {
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        this.shape2.setRightOf(this.shape1);
        this.drawing.setExplicitHeight(100);
        this.drawing.setExplicitWidth(100);
        final Number implicitWidth1 = this.shape1.getImplicitWidth();
        final Number implicitWidth2 = this.shape2.getImplicitWidth();

        softly.then(implicitWidth1).isEqualTo(DrawlNumber.ONE);
        softly.then(implicitWidth2).isEqualTo(DrawlNumber.ONE);
    }

    @Test
    @DisplayName("SVG - WIDTH: When you add two adjacent Circles to a drawing, the drawing is still twice as wide after you get the SVG")
    void whenYouAddTwoAdjacenShapesToADrawingThenTheDrawingIsStillTwiceAsWideAfterYouGetTheSVG()
    {
        this.shape2.setRightOf(this.shape1);
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);

        then(this.drawing.getImplicitWidth()).isEqualTo(DrawlNumber.TWO);

        final String svg = this.drawing.getSVG(100, 100);

        then(this.drawing.getImplicitWidth()).isEqualTo(DrawlNumber.TWO);
    }

    @Test
    @DisplayName("SVG - WIDTH: When you add two default Shapes to a drawing, the drawing is still the same width after you get the SVG")
    void whenYouAddTwoDefaultShapesToADrawingThenTheDrawingIsStillTheSameWidthAfterYouGetTheSVG()
    {
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);

        final Number implicitWidth1 = this.drawing.getImplicitWidth();
        then(implicitWidth1).isEqualTo(DrawlNumber.ONE);

        final String svg = this.drawing.getSVG(100, 100);

        final Number implicitWidth2 = this.drawing.getImplicitWidth();
        then(implicitWidth2).isEqualTo(DrawlNumber.ONE);
    }

    @Test
    @DisplayName("WIDTH - IMPLICIT: When you add two default Shapes to a drawing, the drawing stays the same width")
    void whenYouAddTwoDefaultShapesToADrawingThenTheDrawingStaysTheSameWidth()
    {

        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);

        then(this.drawing.getImplicitWidth()).isEqualTo(DrawlNumber.ONE);
    }

    @Test
    @DisplayName("WIDTH - IMPLICIT: When you add two horizontally adjacent Shapes to a drawing (in the other order), the drawing is twice as wide")
    void whenYouAddTwoHorizontallyAdjacentShapesToADrawingInTheOtherOrderTheDrawingIsTwiceAsWide()
    {
        this.shape2.setRightOf(this.shape1);
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);

        then(this.drawing.getImplicitWidth()).isEqualTo(DrawlNumber.valueOf(2));
    }

    @Test
    @DisplayName("WIDTH - IMPLICIT: When you add two horizontally adjacent Shapes to a drawing, the drawing is twice as wide")
    void whenYouAddTwoHorizontallyAdjacentShapesToADrawingThenTheDrawingIsTwiceAsWide()
    {
        this.shape1.setRightOf(this.shape2);
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);

        then(this.drawing.getImplicitWidth()).isEqualTo(DrawlNumber.valueOf(2));
    }

    @Test
    @DisplayName("WIDTH - EXPLICIT: You can set and get the explicit width of a Drawing")
    void youCanGetAndSetTheExplicitWidthOfADrawing()
    {
        this.drawing.add(this.shape1);
        this.drawing.setExplicitWidth(100);
        final Number explicitWidth = this.drawing.getExplicitWidth();


        then(explicitWidth).isEqualTo(DrawlNumber.valueOf(100));
    }

    @Test
    @DisplayName("WIDTH - EXPLICIT: You can get the explicit width per implicit width for a drawing with one Circle")
    void youCanGetTheExplicitWidthPerImplicitWidthForADrawingWithOneCircle()
    {
        this.drawing.add(this.shape1);
        this.drawing.setExplicitWidth(100);
        this.drawing.setExplicitHeight(100);

        final Number explicitWidthPerObject = this.drawing.getExplicitWidthPerImplicitWidth();

        then(explicitWidthPerObject).isEqualTo(DrawlNumber.valueOf(100));
    }

    @Test
    @DisplayName("WIDTH - EXPLICIT: You can get the explicit width per implicit width for a drawing with two adjacent Circles (other order)")
    void youCanGetTheExplicitWidthPerImplicitWidthForADrawingWithTwoAdjacentCirclesOtherOrder()
    {

        this.shape1.setRightOf(this.shape2);

        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        this.drawing.setExplicitWidth(100);
        this.drawing.setExplicitHeight(100);
        final Number explicitWidthPerObject = this.drawing.getExplicitWidthPerImplicitWidth();

        then(explicitWidthPerObject).isEqualTo(DrawlNumber.valueOf(50));
    }

    @Test
    @DisplayName("WIDTH - EXPLICIT: You can get the explicit width per implicit width for a drawing with two adjacent Circles")
    void youCanGetTheExplicitWidthPerImplicitWidthForADrawingWithTwoAdjacentShapes()
    {
        this.shape2.setRightOf(this.shape1);

        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        this.drawing.setExplicitWidth(100);
        this.drawing.setExplicitHeight(100);
        final Number explicitWidthPerObject = this.drawing.getExplicitWidthPerImplicitWidth();

        then(explicitWidthPerObject).isEqualTo(DrawlNumber.valueOf(50));
    }

    @Test
    @DisplayName("WIDTH - IMPLICIT: You can get the implicit width of a drawing with two adjacent objects (other order)")
    void youCanGetTheImplicitWidthOfADrawingWithTwoAdjacentObjectsOtherOrder()
    {
        this.shape1.setRightOf(this.shape2);

        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        final Number implicitWidth = this.drawing.getImplicitWidth();

        then(implicitWidth).isEqualTo(DrawlNumber.TWO);
    }

    @Test
    @DisplayName("WIDTH - IMPLICIT: You can get the implicit width of a drawing with two adjacent Circles")
    void youCanGetTheImplicitWidthOfADrawingWithTwoAdjacentShapes()
    {

        this.shape2.setRightOf(this.shape1);

        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        final Number implicitWidth = this.drawing.getImplicitWidth();

        then(implicitWidth).isEqualTo(DrawlNumber.TWO);
    }


    @Nested
    @TestMethodOrder(MethodOrderer.Alphanumeric.class)
    @DisplayName("Height")
    class Height
    {

        @Nested
        @TestMethodOrder(MethodOrderer.Alphanumeric.class)
        @DisplayName("Explicit")
        class Explicit
        {

            @Test
            @Tag("explicit")
            @Tag("height")
            @DisplayName("HEIGHT - EXPLICIT When a square (100) drawing has one default shape, then setting its explicit height scales its explicit width to fit")
            void heightExplicitWhenASquare100DrawingHasOneDefaultShapeThenSettingItsExplicitHeightScalesItsExplicitWidthToFit(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(100);
                @Nullable final Number explicitHeightOfDrawing = ShapeDrawingTestProtected.this.drawing.getExplicitHeight();
                @Nullable final Number explicitWidthOfDrawing = ShapeDrawingTestProtected.this.drawing.getExplicitWidth();
                @Nullable final Number explicitHeightOfShape = ShapeDrawingTestProtected.this.shape1.getExplicitHeight();
                @Nullable final Number explicitWidthOfShape = ShapeDrawingTestProtected.this.shape1.getExplicitWidth();
                @NotNull final Number EXPECTED = DrawlNumber.valueOf(100);

                softly.then(explicitHeightOfDrawing).isEqualByComparingTo(EXPECTED);
                softly.then(explicitWidthOfDrawing).isEqualByComparingTo(EXPECTED);
                softly.then(explicitHeightOfShape).isEqualByComparingTo(EXPECTED);
                softly.then(explicitWidthOfShape).isEqualByComparingTo(EXPECTED);
            }

            @Test
            @Tag("explicit")
            @Tag("height")
            @DisplayName("HEIGHT - EXPLICIT When a square (100) drawing has one default shape, then setting its explicit width scales its explicit height to fit")
            void heightExplicitWhenASquare100DrawingHasOneDefaultShapeThenSettingItsExplicitWidthScalesItsExplicitHeightToFit(@NotNull final BDDSoftAssertions softly)
            {
                @NotNull final Integer size = 100;
                @NotNull final Number EXPECTED = DrawlNumber.valueOf(size);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(size);
                @Nullable final Number explicitHeightOfDrawing = ShapeDrawingTestProtected.this.drawing.getExplicitHeight();
                @Nullable final Number explicitWidthOfDrawing = ShapeDrawingTestProtected.this.drawing.getExplicitWidth();
                @Nullable final Number explicitHeightOfShape = ShapeDrawingTestProtected.this.shape1.getExplicitHeight();
                @Nullable final Number explicitWidthOfShape = ShapeDrawingTestProtected.this.shape1.getExplicitWidth();

                softly.then(explicitHeightOfDrawing)
                        .as("Expecting explicit height of drawing to be %s but got %s",
                                EXPECTED.toPlainString(), explicitHeightOfDrawing.toPlainString())
                        .isEqualByComparingTo(EXPECTED);
                softly.then(explicitWidthOfDrawing)
                        .as("Expecting explicit width of drawing to be %s but got %s",
                                EXPECTED.toPlainString(), explicitWidthOfDrawing.toPlainString())
                        .isEqualByComparingTo(EXPECTED);
                softly.then(explicitHeightOfShape)
                        .as("Expecting explicit height of shape to be %s but got %s",
                                EXPECTED.toPlainString(), explicitHeightOfShape.toPlainString())
                        .isEqualByComparingTo(EXPECTED);
                softly.then(explicitWidthOfShape)
                        .as("Expecting explicit width of shape to be %s but got %s",
                                EXPECTED.toPlainString(), explicitWidthOfShape.toPlainString())
                        .isEqualByComparingTo(EXPECTED);
            }

            /**
             * This version of the test sets height first, then width second.
             *
             * @param softly
             */
            @Test
            @Tag("explicit")
            @Tag("height")
            @DisplayName("HEIGHT - EXPLICIT When a square (100) drawing has two adjacent Shapes, then their explicit heights are correct #1")
            void heightExplicitWhenASquare100DrawingHasTwoAdjacentShapesThenTheirExplicitHeightsAreCorrect01(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(100);
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(100);
                @Nullable final Number explicitHeight1 = ShapeDrawingTestProtected.this.shape1.getExplicitHeight();
                @Nullable final Number explicitHeight2 = ShapeDrawingTestProtected.this.shape2.getExplicitHeight();
                @NotNull final Number EXPECTED = DrawlNumber.valueOf(50);

                softly.then(explicitHeight1).isEqualByComparingTo(EXPECTED);
                softly.then(explicitHeight2).isEqualByComparingTo(EXPECTED);
            }

            /**
             * This version of the test sets width first, then height second.
             *
             * @param softly
             */
            @Test
            @Tag("explicit")
            @Tag("height")
            @DisplayName("HEIGHT - EXPLICIT When a square (100) drawing has two adjacent Shapes, then their explicit heights are correct #2")
            void heightExplicitWhenASquare100DrawingHasTwoAdjacentShapesThenTheirExplicitHeightsAreCorrect02(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(100);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(100);
                @Nullable final Number explicitHeight1 = ShapeDrawingTestProtected.this.shape1.getExplicitHeight();
                @Nullable final Number explicitHeight2 = ShapeDrawingTestProtected.this.shape2.getExplicitHeight();
                @NotNull final Number EXPECTED = DrawlNumber.valueOf(50);

                softly.then(explicitHeight1).isEqualByComparingTo(EXPECTED);
                softly.then(explicitHeight2).isEqualByComparingTo(EXPECTED);
            }

            @Test
            @Tag("explicit")
            @Tag("height")
            @DisplayName("HEIGHT - EXPLICIT When a square (100) drawing has two adjacent Shapes, then their explicit heights are correct #3")
            void heightExplicitWhenASquare100DrawingHasTwoAdjacentShapesThenTheirExplicitHeightsAreCorrect03(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitDimensions(100, 100);
                @Nullable final Number explicitHeight1 = ShapeDrawingTestProtected.this.shape1.getExplicitHeight();
                @Nullable final Number explicitHeight2 = ShapeDrawingTestProtected.this.shape2.getExplicitHeight();
                @NotNull final Number expectedHeight = DrawlNumber.valueOf(50);

                softly.then(explicitHeight1)
                        .as("The explicit height of shape1 should be " + expectedHeight.toPlainString() + " but it was " + explicitHeight1)
                        .isEqualTo(expectedHeight);
                softly.then(explicitHeight2)
                        .as("The explicit height of shape2 should be " + expectedHeight.toPlainString() + " but it was " + explicitHeight2)
                        .isEqualTo(expectedHeight);
            }
        }
    }


    /**
     * Tests the length of Drawings with various numbers of Shapes.
     */
    @Nested
    @TestMethodOrder(MethodOrderer.Alphanumeric.class)
    @DisplayName("Length")
    class Length
    {
        @Test
        @Tag("length")
        @Tag("protected")
        @DisplayName("When a Drawing has three horizontally adjacent shapes, then its length is 3")
        void whenADrawingHasThreeHorizontallyAdjacenShapesThenItsLengthIs3()
        {
            ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
            ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
            ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape3);
            ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
            ShapeDrawingTestProtected.this.shape3.setRightOf(ShapeDrawingTestProtected.this.shape2);

            then(ShapeDrawingTestProtected.this.drawing.getLength()).isEqualTo(3);
        }

        @Test
        @Tag("length")
        @Tag("protected")
        @DisplayName("When a Drawing has three shapes, then its length is 3")
        void whenADrawingHasThreeShapesThenItsLengthIs3()
        {
            ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
            ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
            ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape3);

            then(ShapeDrawingTestProtected.this.drawing.getLength()).isEqualTo(3);
        }

        @Test
        @Tag("length")
        @Tag("protected")
        @DisplayName("When a Drawing has three vertically adjacent shapes, then its length is 3")
        void whenADrawingHasThreeVerticallyAdjacenShapesThenItsLengthIs3()
        {
            ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
            ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
            ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape3);
            ShapeDrawingTestProtected.this.shape2.setAbove(ShapeDrawingTestProtected.this.shape1);
            ShapeDrawingTestProtected.this.shape3.setAbove(ShapeDrawingTestProtected.this.shape2);

            then(ShapeDrawingTestProtected.this.drawing.getLength()).isEqualTo(3);
        }
    }

    /**
     * Tests with width of Drawings with various numbers of Shapes.
     */
    @Nested
    @TestMethodOrder(MethodOrderer.Alphanumeric.class)
    @DisplayName("Width")
    class Width
    {
        @Nested
        @TestMethodOrder(MethodOrderer.Alphanumeric.class)
        @DisplayName("Explicit")
        class Explicit
        {


            @Test
            @DisplayName("WIDTH - EXPLICIT: When a drawing has one default Shape, the explicit width per implicit width is the explicit width of the drawing")
            void widthExplicitWhenADrawingHasOneDefaultShapeThenTheExplicitWidthPerObjectIsTheExplicitWidthOfTheDrawing()
            {
                @NotNull final Integer size = 100;
                @NotNull final Number EXPECTED = DrawlNumber.valueOf(size);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(size);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(size);
                @NotNull final Number widthPerObject = ShapeDrawingTestProtected.this.drawing.getExplicitWidthPerImplicitWidth();

                then(widthPerObject).isEqualByComparingTo(EXPECTED);
            }

            @Test
            @Tag("explicit")
            @Tag("width")
            @DisplayName("WIDTH - EXPLICIT: When a drawing has one default Shape, the Shape's explicit width is the explicit width of the drawing")
            void widthExplicitWhenASquare100DrawingHasOneDefaultShapeThenItsExplicitWidthIsTheExplicitWidthOfTheDrawing()
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(100);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(100);
                @Nullable final Number shapeExplicitWidth = ShapeDrawingTestProtected.this.shape1.getExplicitWidth();

                then(shapeExplicitWidth).isEqualByComparingTo(DrawlNumber.valueOf(100));
            }

            @Test
            @Tag("explicit")
            @Tag("width")
            @DisplayName("WIDTH - EXPLICIT: When a square (100) drawing has two adjacent Shapes, then their explicit widths are correct")
            void widthExplicitWhenASquare100DrawingHasTwoAdjacentShapesThenTheirExplicitWidthsAreCorrect(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(100);
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(100);
                @Nullable final Number explicitWidth1 = ShapeDrawingTestProtected.this.shape1.getExplicitWidth();
                @Nullable final Number explicitWidth2 = ShapeDrawingTestProtected.this.shape2.getExplicitWidth();

                softly.then(explicitWidth1).isEqualByComparingTo(DrawlNumber.valueOf(50));
                softly.then(explicitWidth2).isEqualByComparingTo(DrawlNumber.valueOf(50));
            }

        }

    }

    /**
     * Tests the x position of Drawings with various numbers of Shapes.
     */
    @Nested
    @TestMethodOrder(MethodOrderer.Alphanumeric.class)
    @DisplayName("X Position")
    class XPosition
    {

        @Nested
        @TestMethodOrder(MethodOrderer.Alphanumeric.class)
        @DisplayName("Explicit")
        class Explicit
        {

            /**
             * Test that, when a Drawing has three adjacent Shapes, then their x positions are correct.
             * <p>
             * This convenience method allows passing the arguments as Integers.
             *
             * @param widthInteger  The width of the Drawing to be tested.
             * @param heightInteger The height of the Drawing to be tested.
             * @param softly        AssertJ behavior-driven development soft assertions.
             */
            void test3Shapes(@NotNull final Integer widthInteger, @NotNull final Integer heightInteger, @NotNull final BDDSoftAssertions softly)
            {
                this.test3Shapes(widthInteger.floatValue(), heightInteger.floatValue(), softly);
            }

            /**
             * Test that, when a Drawing has three adjacent Shapes, then their x positions are correct.
             * <p>
             * This convenience method allows passing the arguments as Strings.
             *
             * @param widthString  The width of the Drawing to be tested.
             * @param heightString The height of the Drawing to be tested.
             * @param softly       AssertJ behavior-driven development soft assertions.
             */
            void test3Shapes(@NotNull final String widthString, @NotNull final String heightString, @NotNull final BDDSoftAssertions softly)
            {
                this.test3Shapes(Float.parseFloat(widthString), Float.parseFloat(heightString), softly);
            }

            /**
             * Test that, when a Drawing has three adjacent Shapes, then their x positions are correct.
             * <p>
             * This method centralizes the test code.
             *
             * @param widthFloat  The width of the drawing to be tested
             * @param heightFloat The height of the drawing to be tested
             * @param softly      AssertJ behavior-driven development soft assertions
             */
            void test3Shapes(final Float widthFloat, final Float heightFloat, @NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape3);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.shape3.setRightOf(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(widthFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitWidth().equals(DrawlNumber.valueOf(widthFloat)));
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(heightFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitHeight().equals(DrawlNumber.valueOf(heightFloat)));

                // At this aspect ratio, the sizes of the shapes may be constrained by the height
                @NotNull final Number heightNumber = DrawlNumber.valueOf(heightFloat);
                @NotNull final Number widthNumber = DrawlNumber.valueOf(widthFloat);

                @NotNull final Number aspectRatio = DrawlNumber.valueOf(widthFloat / heightFloat);

                final Number widthOfShapes;
                if (aspectRatio.isGreaterThan(3))
                {
                    widthOfShapes = heightNumber.multiply(DrawlNumber.valueOf(3));
                }
                else
                {
                    widthOfShapes = widthNumber;
                }

                @NotNull final Number extraWidth = widthNumber.subtract(widthOfShapes);
                @NotNull final Number extraWidthLeft = extraWidth.divide(DrawlNumber.TWO, DrawlNumber.mcOperations);

                @NotNull Number shape1ExpectedXPosition = widthOfShapes.divide(DrawlNumber.valueOf(6), DrawlNumber.mcOperations);
                if (aspectRatio.isGreaterThan(3))
                {
                    shape1ExpectedXPosition = shape1ExpectedXPosition.add(extraWidthLeft);
                }

                @NotNull final Number shape1ExplicitXPosition = ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter();
                softly.then(shape1ExplicitXPosition.compareToFuzzy(shape1ExpectedXPosition))
                        .as("Expecting the explicit x position of shape 1 to be " +
                                shape1ExpectedXPosition + " but it was " + shape1ExplicitXPosition).isEqualTo(0);

                @NotNull Number shape2ExpectedXPosition = widthOfShapes.divide(DrawlNumber.TWO, DrawlNumber.mcOperations);
                if (aspectRatio.isGreaterThan(3))
                {
                    shape2ExpectedXPosition = shape2ExpectedXPosition.add(extraWidthLeft);
                }

                @NotNull final Number shape2ExplicitXPosition = ShapeDrawingTestProtected.this.shape2.getExplicitXPositionCenter();
                softly.then(shape2ExplicitXPosition.compareToFuzzy(shape2ExpectedXPosition))
                        .as("Expecting the explicit x position of shape 2 to be " +
                                shape2ExpectedXPosition + " but it was " + shape2ExplicitXPosition).isEqualTo(0);

                @NotNull final Number fraction = DrawlNumber.valueOf(5).divide(DrawlNumber.valueOf(6), DrawlNumber.mcOperations);
                @NotNull Number shape3ExpectedXPosition = widthOfShapes.multiply(fraction, DrawlNumber.mcOperations);
                if (aspectRatio.isGreaterThan(3))
                {
                    shape3ExpectedXPosition = shape3ExpectedXPosition.add(extraWidthLeft);
                }
                @NotNull final Number shape3ExplicitXPosition = ShapeDrawingTestProtected.this.shape3.getExplicitXPositionCenter();
                softly.then(shape3ExplicitXPosition.compareToFuzzy(shape3ExpectedXPosition))
                        .as("Expecting the explicit x position of shape 3 to be " +
                                shape3ExpectedXPosition + " but it was " + shape3ExplicitXPosition).isEqualTo(0);
            }

            /**
             * Test that, when a Drawing has one adjacent Shape, then its x position is correct.
             * <p>
             * This version uses Float.MAX_VALUE for the width and height of the Shape.
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has one default Shape, then its x-position is correct (Float.MAX_VALUE)")
            void whenADrawingHasOneShapeThenItsXPositionIsCorrectFloatMax(@NotNull final BDDSoftAssertions softly)
            {
                // TODO [Issue No 16]
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                final Float widthFloat = Float.MAX_VALUE;
                final Float heightFloat = Float.MAX_VALUE;
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(widthFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitWidth().equals(DrawlNumber.valueOf(widthFloat)));
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(heightFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitHeight().equals(DrawlNumber.valueOf(heightFloat)));

                @NotNull final Number widthBigDecimal = DrawlNumber.valueOf(widthFloat);

                @NotNull final Number shape1ExpectedXPosition = widthBigDecimal.divide(DrawlNumber.valueOf(2), DrawlNumber.mcOperations);
                @NotNull final Number shape1ExplicitXPosition = ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter();
                softly.then(shape1ExplicitXPosition.compareToFuzzy(shape1ExpectedXPosition))
                        .as("Expecting the explicit position of " + ShapeDrawingTestProtected.this.shape1 + "to be " +
                                shape1ExpectedXPosition + " but it was " + shape1ExplicitXPosition).isEqualTo(0);

            }

            /**
             * Test that, when a Drawing has one adjacent Shape, then its x position is correct.
             * <p>
             * This version uses Float.MAX_VALUE - 1 for the width and height of the Shape.
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has one default Shape, then its x-position is correct (Float.MAX_VALUE - 1)")
            void whenADrawingHasOneShapeThenItsXPositionIsCorrectFloatMaxMinus1(@NotNull final BDDSoftAssertions softly)
            {
                // TODO [Issue No 16]
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                @NotNull final Float widthFloat = Float.MAX_VALUE - 1;
                @NotNull final Float heightFloat = Float.MAX_VALUE - 1;
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(widthFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitWidth().equals(DrawlNumber.valueOf(widthFloat)));
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(heightFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitHeight().equals(DrawlNumber.valueOf(heightFloat)));

                @NotNull final Number widthBigDecimal = DrawlNumber.valueOf(widthFloat);

                @NotNull final Number shape1ExpectedXPosition = widthBigDecimal.divide(DrawlNumber.valueOf(2), DrawlNumber.mcOperations);
                @NotNull final Number shape1ExplicitXPosition = ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter();
                softly.then(shape1ExplicitXPosition.compareToFuzzy(shape1ExpectedXPosition))
                        .as("Expecting the explicit position of " + ShapeDrawingTestProtected.this.shape1 + "to be " +
                                shape1ExpectedXPosition + " but it was " + shape1ExplicitXPosition).isEqualTo(0);

            }

            /**
             * Test that, when a Drawing has one default Shape, then its x position is correct.
             * <p>
             * This version uses a couple of specific numbers that were chosen randomly but fail reliably for three
             * shapes. Do they also fail for one shape (which is easier to debug)?
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has one default Shape, then its x-position is correct (random failed)")
            void whenADrawingHasOneShapeThenItsXPositionIsCorrectRandomFailed(@NotNull final BDDSoftAssertions softly)
            {
                // TODO [Issue No 16]
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                @NotNull final Float widthFloat = Float.valueOf("2.149144E38");
                @NotNull final Float heightFloat = Float.valueOf("5.567761E37");
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(widthFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitWidth().equals(DrawlNumber.valueOf(widthFloat)));
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(heightFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitHeight().equals(DrawlNumber.valueOf(heightFloat)));

                @NotNull final Number widthBigDecimal = DrawlNumber.valueOf(widthFloat);

                @NotNull final Number shape1ExpectedXPosition = widthBigDecimal.divide(DrawlNumber.valueOf(2), DrawlNumber.mcOperations);
                @NotNull final Number shape1ExplicitXPosition = ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter();
                softly.then(shape1ExplicitXPosition.compareToFuzzy(shape1ExpectedXPosition))
                        .as("Expecting the explicit position of " + ShapeDrawingTestProtected.this.shape1 + "to be " +
                                shape1ExpectedXPosition + " but it was " + shape1ExplicitXPosition).isEqualTo(0);

            }

            /**
             * Test that, when a Drawing has one default Shape, then its x position is correct.
             * <p>
             * This version uses low-value analogs of a couple of specific numbers that were chosen randomly but
             * fail reliably for three shapes. They also fail for one shape (which is easier to debug).
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has one default Shape, then its x-position is correct (random failed low value)")
            void whenADrawingHasOneShapeThenItsXPositionIsCorrectRandomFailedLowValue(@NotNull final BDDSoftAssertions softly)
            {
                // TODO [Issue No 16]
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                @NotNull final Float widthFloat = Float.valueOf("214");
                @NotNull final Float heightFloat = Float.valueOf("56");
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(widthFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitWidth().equals(DrawlNumber.valueOf(widthFloat)));
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(heightFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitHeight().equals(DrawlNumber.valueOf(heightFloat)));

                @NotNull final Number widthBigDecimal = DrawlNumber.valueOf(widthFloat);

                @NotNull final Number shape1ExpectedXPosition = widthBigDecimal.divide(DrawlNumber.valueOf(2), DrawlNumber.mcOperations);
                @NotNull final Number shape1ExplicitXPosition = ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter();
                softly.then(shape1ExplicitXPosition.compareToFuzzy(shape1ExpectedXPosition))
                        .as("Expecting the explicit position of " + ShapeDrawingTestProtected.this.shape1 + "to be " +
                                shape1ExpectedXPosition + " but it was " + shape1ExplicitXPosition).isEqualTo(0);

            }

            /**
             * Test that, when a Drawing has one default Shape, then its x position is correct.
             * <p>
             * This version uses a couple of specific numbers that were chosen randomly but fail reliably for three
             * shapes. Do they also fail for one shape (which is easier to debug)?
             * <p>
             * This version also uses setExplicitDimensions() instead of setExplicitWidth() and setExplicitHeight().
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has one default Shape, then its x-position is correct (random failed) using setExplicitDimensions()")
            void whenADrawingHasOneShapeThenItsXPositionIsCorrectRandomFailedSetExplicitDimensions(@NotNull final BDDSoftAssertions softly)
            {
                // TODO [Issue No 16]
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                @NotNull final Float widthFloat = Float.valueOf("2.149144E38");
                @NotNull final Float heightFloat = Float.valueOf("5.567761E37");
                ShapeDrawingTestProtected.this.drawing.setExplicitDimensions(widthFloat, heightFloat);
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitWidth().equals(DrawlNumber.valueOf(widthFloat)));
                softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitHeight().equals(DrawlNumber.valueOf(heightFloat)));

                @NotNull final Number widthBigDecimal = DrawlNumber.valueOf(widthFloat);

                @NotNull final Number shape1ExpectedXPosition = widthBigDecimal.divide(DrawlNumber.valueOf(2), DrawlNumber.mcOperations);
                @NotNull final Number shape1ExplicitXPosition = ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter();
                softly.then(shape1ExplicitXPosition.compareToFuzzy(shape1ExpectedXPosition))
                        .as("Expecting the explicit position of " + ShapeDrawingTestProtected.this.shape1 + "to be " +
                                shape1ExpectedXPosition + " but it was " + shape1ExplicitXPosition).isEqualTo(0);

            }

            @Tag("x-position")
            @Tag("explicit")
            @DisplayName("When a drawing has three adjacent default circles added sequentially, then their explicit x-positions are correct (fixed)")
            void whenADrawingHasThreeAdjacentDefaultCirclesAddedSequentiallyThenTheirExplicitXPositionsAreCorrectFixed(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape3);
                ShapeDrawingTestProtected.this.shape3.setRightOf(ShapeDrawingTestProtected.this.shape2);
                @NotNull final Integer width = 100;
                @NotNull final Integer height = 100;
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(width);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(height);
                @NotNull final Number bigWidth = DrawlNumber.valueOf(width);
                @NotNull final Number bigX1 = bigWidth.divide(DrawlNumber.valueOf(6), DrawlNumber.mcOperations);
                @NotNull final Number bigX2 = bigWidth.divide(DrawlNumber.valueOf(2), DrawlNumber.mcOperations);
                @NotNull final Number fraction = DrawlNumber.valueOf(5).divide(DrawlNumber.valueOf(6), DrawlNumber.mcOperations);
                @NotNull final Number bigX3 = bigWidth.multiply(fraction, DrawlNumber.mcOperations);

                @NotNull final Number actualExplicitXPositionCenter1 = ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter();
                @NotNull final Number actualExplicitXPositionCenter2 = ShapeDrawingTestProtected.this.shape2.getExplicitXPositionCenter();
                @NotNull final Number actualExplicitXPositionCenter3 = ShapeDrawingTestProtected.this.shape3.getExplicitXPositionCenter();

                then:
                softly.then(bigX1).isEqualTo(actualExplicitXPositionCenter1);
                softly.then(bigX2).isEqualTo(actualExplicitXPositionCenter2);
                softly.then(bigX3).isEqualTo(actualExplicitXPositionCenter3);
            }

            @Tag("x-position")
            @Tag("explicit")
            @DisplayName("When a drawing has three adjacent default Circles, then their explicit x-positions are correct (fixed)")
            void whenADrawingHasThreeAdjacentDefaultCirclesThenTheirExplicitXPositionsAreCorrectFixed(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape3);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.shape3.setRightOf(ShapeDrawingTestProtected.this.shape2);
                @NotNull final Integer width = 100;
                @NotNull final Integer height = 100;
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(width);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(height);
                @NotNull final Number bigWidth = DrawlNumber.valueOf(width);
                @NotNull final Number expectedExplicitXPositionCenter1 = bigWidth.divide(DrawlNumber.valueOf(6), DrawlNumber.mcOperations);
                @NotNull final Number expectedExplicitXPositionCenter2 = bigWidth.divide(DrawlNumber.valueOf(2), DrawlNumber.mcOperations);
                @NotNull final Number fraction = DrawlNumber.valueOf(5).divide(DrawlNumber.valueOf(6), DrawlNumber.mcOperations);
                @NotNull final Number expectedExplicitXPositionCenter3 = bigWidth.multiply(fraction, DrawlNumber.mcOperations);

                @NotNull final Number actualExplicitXPositionCenter1 = ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter();
                @NotNull final Number actualExplicitXPositionCenter2 = ShapeDrawingTestProtected.this.shape2.getExplicitXPositionCenter();
                @NotNull final Number actualExplicitXPositionCenter3 = ShapeDrawingTestProtected.this.shape3.getExplicitXPositionCenter();

                softly.then(actualExplicitXPositionCenter1).isEqualTo(expectedExplicitXPositionCenter1);
                softly.then(actualExplicitXPositionCenter2).isEqualTo(expectedExplicitXPositionCenter2);
                softly.then(actualExplicitXPositionCenter3).isEqualTo(expectedExplicitXPositionCenter3);
            }

            @Tag("x-position")
            @Tag("explicit")
            @DisplayName("When a drawing has three adjacent default Shapes, then their explicit x-positions are correct (max size)")
            void whenADrawingHasThreeAdjacentDefaultShapesThenTheirExplicitXPositionsAreCorrectMaxSize(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape3);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.shape3.setRightOf(ShapeDrawingTestProtected.this.shape2);
                final Float width = Float.MAX_VALUE;
                final Float height = Float.MAX_VALUE;
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(width);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(height);
                @NotNull final Number bigX1 = DrawlNumber.valueOf(width).divide(DrawlNumber.valueOf(6), DrawlNumber.mcOperations);
                @NotNull final Number bigX2 = DrawlNumber.valueOf(width).divide(DrawlNumber.valueOf(2), DrawlNumber.mcOperations);
                @NotNull final Number fraction = DrawlNumber.valueOf(5).divide(DrawlNumber.valueOf(6), DrawlNumber.mcOperations);
                @NotNull final Number bigX3 = DrawlNumber.valueOf(width).multiply(fraction, DrawlNumber.mcOperations);
                final float bigX1f = bigX1.floatValue();
                final float bigX2f = bigX2.floatValue();
                final float bigX3f = bigX3.floatValue();

                softly.then(Float.MAX_VALUE).isGreaterThanOrEqualTo(bigX1f);
                softly.then(Float.MAX_VALUE).isGreaterThanOrEqualTo(bigX2f);
                softly.then(Float.MAX_VALUE).isGreaterThanOrEqualTo(bigX3f);

                softly.then(bigX1f).isEqualTo(ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter().floatValue());
                softly.then(bigX2f).isEqualTo(ShapeDrawingTestProtected.this.shape2.getExplicitXPositionCenter().floatValue());
                softly.then(bigX3f).isEqualTo(ShapeDrawingTestProtected.this.shape3.getExplicitXPositionCenter().floatValue());

            }

            @Test
            @DisplayName("When a drawing has three adjacent default Shapes, then their x-positions are correct (random)")
            void whenADrawingHasThreeAdjacentShapesThenTheirXPositionsAreCorrectRandom(@NotNull final BDDSoftAssertions softly)
            {
                // TODO [Issue No 16]
                // TODO This method needs code from the others because it may randomly generate code in which the
                // height is less than 1/3 of the width.

                final Double widthDouble = ThreadLocalRandom.current().nextDouble(0, Float.MAX_VALUE);
                final Float widthFloat = widthDouble.floatValue();
                final Double heightDouble = ThreadLocalRandom.current().nextDouble(0, Float.MAX_VALUE);
                final Float heightFloat = heightDouble.floatValue();
                this.test3Shapes(widthFloat, heightFloat, softly);
            }

            /**
             * Test that, when a Drawing has three adjacent Shapes, then their x positions are correct.
             * <p>
             * This version uses a couple of specific numbers that were chosen randomly but fail reliably.
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has three adjacent default Shapes, then their x-positions are correct (random failed)")
            void whenADrawingHasThreeAdjacentShapesThenTheirXPositionsAreCorrectRandomFailed(@NotNull final BDDSoftAssertions softly)
            {
                this.test3Shapes("2.149144E38", "5.567761E37", softly);

                // TODO [Issue No 16]
            }

            /**
             * Test that, when a Drawing has three adjacent Shapes, then their x positions are correct.
             * <p>
             * This version uses a couple of specific numbers that were chosen randomly but fail reliably.
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has three adjacent default Shapes, then their x-positions are correct (random failed no 2)")
            void whenADrawingHasThreeAdjacentShapesThenTheirXPositionsAreCorrectRandomFailed02(@NotNull final BDDSoftAssertions softly)
            {
                // TODO [Issue No 16]
                this.test3Shapes("2.1890229E38", "2.6594734E38", softly);
            }

            /**
             * Test that, when a Drawing has three adjacent Shapes, then their x positions are correct.
             * <p>
             * This version uses a couple of specific numbers that were chosen randomly but fail reliably.
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has three adjacent default Shapes, then their x-positions are correct (random failed no 2 low value)")
            void whenADrawingHasThreeAdjacentShapesThenTheirXPositionsAreCorrectRandomFailed02LowValue(@NotNull final BDDSoftAssertions softly)
            {
                this.test3Shapes(219, 266, softly);
                // TODO [Issue No 16]
            }

            /**
             * Test that, when a Drawing has three adjacent Shapes, then their x positions are correct.
             * <p>
             * This version uses low-value analogs of a couple of specific numbers that were chosen randomly but fail reliably.
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has three adjacent default Shapes, then their x-positions are correct (random failed - low value)")
            void whenADrawingHasThreeAdjacentShapesThenTheirXPositionsAreCorrectRandomFailedLowValue(@NotNull final BDDSoftAssertions softly)
            {
                this.test3Shapes("214.9144", "55.67761", softly);
            }

            /**
             * Test that, when a Drawing has three adjacent Shapes, then their x positions are correct.
             * <p>
             * This version uses low-value analogs of a couple of specific numbers that were chosen randomly but fail reliably,
             * specifically choosing numbers that are easy to work with.
             *
             * @param softly Allows using JAssert softly.then assertions.
             */
            @Test
            @DisplayName("When a drawing has three adjacent default Shapes, then their x-positions are correct (low value - simple)")
            void whenADrawingHasThreeAdjacentShapesThenTheirXPositionsAreCorrectRandomFailedLowValueSimple(@NotNull final BDDSoftAssertions softly)
            {
                this.test3Shapes("60", "19", softly);
            }

            @Tag("x-position")
            @Tag("implicit")
            @DisplayName("When a drawing has two adjacent default Circles, then their implicit x-positions are correct (fixed)")
            void whenADrawingHasTwoAdjacentDefaultCirclesThenTheirImplicitXPositionsAreCorrectFixed(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);

                softly.then(DrawlNumber.ZERO).isEqualTo(ShapeDrawingTestProtected.this.shape1.getImplicitXPositionCenter());
                softly.then(DrawlNumber.ONE).isEqualTo(ShapeDrawingTestProtected.this.shape2.getImplicitXPositionCenter());
            }

            @Test
            @DisplayName("X-POSITION - IMPLICIT: When a drawing has two adjacent default Circles, then their explicit x-positions are correct (fixed)")
            void whenADrawingHasTwoAdjacentDefaultShapesThenTheirExplicitXPositionsAreCorrectFixed(@NotNull final BDDSoftAssertions softly)
            {
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                final int width = 100;
                final int height = 100;
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(width);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(height);

                @NotNull final Number EXPECTED_1 = DrawlNumber.valueOf(width / 4);
                @NotNull final Number EXPECTED_2 = DrawlNumber.valueOf((3 * width) / 4);

                softly.then(EXPECTED_1).isEqualTo(ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter());
                softly.then(EXPECTED_2).isEqualTo(ShapeDrawingTestProtected.this.shape2.getExplicitXPositionCenter());
            }

            @Tag("x-position")
            @Tag("explicit")
            @DisplayName("When a square (100) drawing has two adjacent Circles, then their explicit x positions are correct")
            void whenASquare100DrawingHasTwoAdjacentCirclesThenTheirExplicitXPositionsAreCorrect(@NotNull final BDDSoftAssertions softly)
            {

                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitHeight(100);
                ShapeDrawingTestProtected.this.drawing.setExplicitWidth(100);
                @NotNull final Number explicitXPosition1 = ShapeDrawingTestProtected.this.shape1.getExplicitXPositionCenter();
                @NotNull final Number explicitXPosition2 = ShapeDrawingTestProtected.this.shape2.getExplicitXPositionCenter();

                then:
                softly.then(explicitXPosition1).isEqualTo(DrawlNumber.valueOf(25));
                softly.then(explicitXPosition2).isEqualTo(DrawlNumber.valueOf(75));
            }

            @Test
            @DisplayName("When Text is added to a shape then it inherits explicit x position")
            void whenTextIsAddedToAShapeThenItInheritsExplicitXPosition()
            {
                @NotNull final Text text = new Text("Drawl");
                ShapeDrawingTestProtected.this.shape1.addText(text);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitDimensions(100, 100);

                then(text.getExplicitXPositionCenter()).isEqualTo(DrawlNumber.valueOf(50));
            }

            @Test
            @DisplayName("When Text is added to a shape then it inherits explicit y position")
            void whenTextIsAddedToAShapeThenItInheritsExplicitYPosition()
            {
                @NotNull final Text text = new Text("Drawl");
                ShapeDrawingTestProtected.this.shape1.addText(text);
                ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                ShapeDrawingTestProtected.this.drawing.setExplicitDimensions(100, 100);

                then(text.getExplicitYPositionCenter()).isEqualTo(DrawlNumber.valueOf(50));
            }
        }


        @Nested
        @TestMethodOrder(MethodOrderer.Alphanumeric.class)
        @DisplayName("Y Position")
        class YPosition
        {
            @Nested
            @TestMethodOrder(MethodOrderer.Alphanumeric.class)
            @DisplayName("Explicit")
            class Explicit
            {

                @Test
                @Tag("explicit")
                @Tag("y-position")
                @DisplayName("Y-POSITION - EXPLICIT: When a square (100) drawing has a default Shape, then its explicit y position is correct")
                void yPositionExplicitWhenASquare100DrawingHasOneDefaultShapeThenItsExplicitYPositionIsCorrect()
                {
                    @NotNull final Integer size = 100;
                    ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                    ShapeDrawingTestProtected.this.drawing.setExplicitDimensions(size, size);
                    @NotNull final Number yPosition = ShapeDrawingTestProtected.this.shape1.getExplicitYPositionCenter();
                    @NotNull final Number EXPECTED = DrawlNumber.valueOf(50);

                    then(yPosition).isEqualByComparingTo(EXPECTED);
                }

                /**
                 * This variant tests the effect of this order:
                 * 1. Adding the shapes to the drawing.
                 * 2. Setting the shapes adjacent to one another.
                 * 3. Setting the size of the drawing (height first).
                 *
                 * @param softly
                 */
                @Test
                @Tag("explicit")
                @Tag("y-position")
                @DisplayName("Y-POSITION - EXPLICIT: When a square (100) drawing has two adjacent Shapes, then their explicit y positions are correct #1a")
                void yPositionExplicitWhenASquare100DrawingHasTwoAdjacentShapesThenTheirExplicitYPositionsAreCorrect01a(@NotNull final BDDSoftAssertions softly)
                {

                    @NotNull final Integer SIZE = 100;
                    @NotNull final Number EXPECTED_Y_POS = DrawlNumber.valueOf(SIZE).divide(DrawlNumber.TWO, DrawlNumber.mcOperations);

                    ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                    ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                    ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);

                    ShapeDrawingTestProtected.this.drawing.setExplicitHeight(SIZE);
                    softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitToImplicitRatio())
                            .as("After setExplicitHeight, the explicit to implicit ratio should be %d", SIZE)
                            .isEqualByComparingTo(DrawlNumber.valueOf(SIZE));

                    ShapeDrawingTestProtected.this.drawing.setExplicitWidth(SIZE);
                    softly.then(ShapeDrawingTestProtected.this.drawing.getExplicitToImplicitRatio())
                            .as("After setExplicitWidth, the explicit to implicit ratio should be %d", SIZE / 2.0)
                            .isEqualByComparingTo(DrawlNumber.valueOf(SIZE / 2.0));

                    @NotNull final Number explicitYPosition1 = ShapeDrawingTestProtected.this.shape1.getExplicitYPositionCenter();
                    softly.then(explicitYPosition1)
                            .as("The y position of shape1 should be %s", EXPECTED_Y_POS.toPlainString())
                            .isEqualByComparingTo(EXPECTED_Y_POS);

                    @NotNull final Number explicitYPosition2 = ShapeDrawingTestProtected.this.shape2.getExplicitYPositionCenter();
                    softly.then(explicitYPosition2)
                            .as("The y position of shape2 should be %s", EXPECTED_Y_POS.toPlainString())
                            .isEqualByComparingTo(EXPECTED_Y_POS);
                }

                /**
                 * This variant tests the effect of this order:
                 * 1. Adding the shapes to the drawing.
                 * 2. Setting the shapes adjacent to one another.
                 * 3. Setting the size of the drawing (width first).
                 *
                 * @param softly
                 */
                @Test
                @Tag("explicit")
                @Tag("y-position")
                @DisplayName("Y-POSITION - EXPLICIT: When a square (100) drawing has two adjacent Shapes, then their explicit y positions are correct #1b")
                void yPositionExplicitWhenASquare100DrawingHasTwoAdjacentShapesThenTheirExplicitYPositionsAreCorrect01b(@NotNull final BDDSoftAssertions softly)
                {
                    ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                    ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                    ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                    ShapeDrawingTestProtected.this.drawing.setExplicitWidth(100);
                    ShapeDrawingTestProtected.this.drawing.setExplicitHeight(100);
                    @NotNull final Number explicitYPosition1 = ShapeDrawingTestProtected.this.shape1.getExplicitYPositionCenter();
                    @NotNull final Number explicitYPosition2 = ShapeDrawingTestProtected.this.shape2.getExplicitYPositionCenter();
                    @NotNull final Number EXPECTED = DrawlNumber.valueOf(50);

                    softly.then(explicitYPosition1).isEqualByComparingTo(EXPECTED);
                    softly.then(explicitYPosition2).isEqualByComparingTo(EXPECTED);
                }

                @Test
                @Tag("explicit")
                @Tag("y-position")
                @DisplayName("Y-POSITION - EXPLICIT: When a square (100) drawing has two adjacent Shapes, then their explicit y positions are correct (with setExplicitDimensions)")
                void yPositionExplicitWhenASquare100DrawingHasTwoAdjacentShapesThenTheirExplicitYPositionsAreCorrectWithSetExplicitDimensions(@NotNull final BDDSoftAssertions softly)
                {
                    @NotNull final Integer sizeOfDrawing = 100;
                    @NotNull final Number EXPECTED = DrawlNumber.valueOf(sizeOfDrawing).divide(DrawlNumber.TWO, DrawlNumber.mcOperations);

                    ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                    Number implicitYPosition1 = ShapeDrawingTestProtected.this.shape1.getImplicitYPositionCenter();
                    softly.then(implicitYPosition1)
                            .as("The actual implicit y position of Shape 1 (" + implicitYPosition1 + ") should match the"
                                    + " expected explicit y position: (" + 0 + ")")
                            .isEqualByComparingTo(DrawlNumber.ZERO);

                    ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                    Number implicitYPosition2 = ShapeDrawingTestProtected.this.shape2.getImplicitYPositionCenter();
                    softly.then(implicitYPosition2)
                            .as("The actual implicit y position of Shape 2 (" + implicitYPosition2 + ") should match the"
                                    + " expected explicit y position: (" + 0 + ")")
                            .isEqualByComparingTo(DrawlNumber.ZERO);

                    ShapeDrawingTestProtected.this.shape2.setRightOf(ShapeDrawingTestProtected.this.shape1);
                    implicitYPosition1 = ShapeDrawingTestProtected.this.shape1.getImplicitYPositionCenter();
                    softly.then(implicitYPosition1)
                            .as("The actual implicit y position of Shape 1 (" + implicitYPosition1 + ") should match the"
                                    + " expected explicit y position: (" + 0 + ")")
                            .isEqualByComparingTo(DrawlNumber.ZERO);
                    implicitYPosition2 = ShapeDrawingTestProtected.this.shape2.getImplicitYPositionCenter();
                    softly.then(implicitYPosition2)
                            .as("The actual implicit y position of Shape 2 (" + implicitYPosition2 + ") should match the"
                                    + " expected explicit y position: (" + 0 + ")")
                            .isEqualByComparingTo(DrawlNumber.ZERO);

                    ShapeDrawingTestProtected.this.drawing.setExplicitDimensions(sizeOfDrawing, sizeOfDrawing);
                    implicitYPosition1 = ShapeDrawingTestProtected.this.shape1.getImplicitYPositionCenter();
                    softly.then(implicitYPosition1)
                            .as("The actual implicit y position of Shape 1 (" + implicitYPosition1 + ") should match the"
                                    + " expected explicit y position: (" + 0 + ")")
                            .isEqualByComparingTo(DrawlNumber.ZERO);
                    implicitYPosition2 = ShapeDrawingTestProtected.this.shape1.getImplicitYPositionCenter();
                    softly.then(implicitYPosition2)
                            .as("The actual implicit y position of Shape 2 (" + implicitYPosition2 + ") should match the"
                                    + " expected explicit y position: (" + 0 + ")")
                            .isEqualByComparingTo(DrawlNumber.ZERO);

                    @NotNull final Number explicitYPosition1 = ShapeDrawingTestProtected.this.shape1.getExplicitYPositionCenter();
                    softly.then(explicitYPosition1)
                            .as("The actual explicit y position of Shape 1 (" + explicitYPosition1 + ") should match the"
                                    + " expected explicit y position: (" + EXPECTED + ")")
                            .isEqualByComparingTo(EXPECTED);

                    @NotNull final Number explicitYPosition2 = ShapeDrawingTestProtected.this.shape2.getExplicitYPositionCenter();
                    softly.then(explicitYPosition2)
                            .as("The actual explicit y position of Shape 2 (" + explicitYPosition2 + ") should match the"
                                    + " expected explicit y position: (" + EXPECTED + ")")
                            .isEqualByComparingTo(EXPECTED);
                }

            }

            @Nested
            @TestMethodOrder(MethodOrderer.Alphanumeric.class)
            @DisplayName("Implicit")
            class Implicit
            {
                @Test
                @Tag("implicit")
                @Tag("y-position")
                @Tag("protected")
                @DisplayName("When a drawing has two vertically adjacent default Circles, then their implicit y-positions are correct (fixed)")
                void whenADrawingHasTwoAdjacentDefaultCirclesThenTheirImplicitYPositionsAreCorrect(@NotNull final BDDSoftAssertions softly)
                {
                    ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape1);
                    ShapeDrawingTestProtected.this.drawing.add(ShapeDrawingTestProtected.this.shape2);
                    ShapeDrawingTestProtected.this.shape2.setAbove(ShapeDrawingTestProtected.this.shape1);

                    softly.then(DrawlNumber.ZERO).isEqualTo(ShapeDrawingTestProtected.this.shape1.getImplicitYPositionCenter());
                    softly.then(DrawlNumber.ONE).isEqualTo(ShapeDrawingTestProtected.this.shape2.getImplicitYPositionCenter());
                }
            }

        }

        @Nested
        @TestMethodOrder(MethodOrderer.Alphanumeric.class)
        @DisplayName("Y Position Bottom")
        class YPositionBottom
        {


            @Test
            @DisplayName("When a Shape object is created, then the user can get the implicit y position of its bottom")
            void whenATextObjectIsCreatedThenTheUserCanGetTheBottomYPosition()
            {
                then(ShapeDrawingTestProtected.this.shape1.getImplicitYPositionBottom()).isNotNull();
            }
        }

    }

}
