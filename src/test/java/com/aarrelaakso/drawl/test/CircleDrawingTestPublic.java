/*
 * Copyright (c) 2020. Aarre Laakso
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.aarrelaakso.drawl.test;

import com.aarrelaakso.drawl.Circle;
import com.google.common.flogger.FluentLogger;
import org.apache.commons.lang3.StringUtils;
import org.assertj.core.api.BDDSoftAssertions;
import org.jetbrains.annotations.NotNull;
import org.junit.jupiter.api.*;

import static org.assertj.core.api.BDDAssertions.then;
import static org.junit.jupiter.api.Assertions.assertTrue;

@TestMethodOrder(MethodOrderer.Alphanumeric.class)
@DisplayName("Circle Drawings - Public API")
public class CircleDrawingTestPublic extends ShapeDrawingTestPublic
{

    private static final FluentLogger logger = FluentLogger.forEnclosingClass();

    @BeforeEach
    @DisplayName("Given three default Circles")
    void givenTheeDefaultCircles()
    {
        this.shape1 = new Circle();
        this.shape2 = new Circle();
        this.shape3 = new Circle();
    }


    @Test
    @DisplayName("SVG: The SVG generated by a drawing with a Circle is exactly as expected")
    void svgGeneratedByADrawingWithACircleIsExactlyAsExpected()
    {
        this.drawing.add(this.shape1);
        @NotNull final String svg = this.drawing.getSVG(100, 100);

        then(svg).isEqualTo("<?xml version='1.0' standalone='no'?><svg xmlns='http://www.w3.org/2000/svg' width='100' height='100'><circle r='50' cx='50' cy='50' /></svg>");
    }


    @Test
    @DisplayName("When a default Circle is the only content of a drawing, then it is as large as possible")
    void svgWhenADefaultCircleIsTheOnlyContentOfADrawingThenItIsAsLargeAsPossible()
    {
        this.drawing.add(this.shape1);
        @NotNull final String svg = this.drawing.getSVG(100, 100);

        assertTrue(svg.contains("circle r='50'"));
    }

    @Test
    @DisplayName("SVG: When a square (100) drawing has two adjacent Circles, then the SVG is correct")
    void svgWhenASquare100DrawingHasTwoAdjacentCirclesThenTheSVGIsCorrect(@NotNull final BDDSoftAssertions softly)
    {
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        this.shape2.setRightOf(this.shape1);
        @NotNull final String svg = this.drawing.getSVG(100, 100);

        softly.then(svg).contains("<?xml version='1.0' standalone='no'?><svg xmlns='http://www.w3.org/2000/svg' width='100' height='100'>")
                .contains("<circle r='25' cx='25' cy='50' />")
                .contains("<circle r='25' cx='75' cy='50' />")
                .contains("</svg>");
    }

    @Test
    @DisplayName("SVG: When a Circle is placed with an implicit position, the SVG contains a concrete position")
    void whenACircleIsPlacedWithAnImplicitPositionThenTheSVGContainsAConcretePosition()
    {
        this.drawing.add(this.shape1);
        final String svg = this.drawing.getSVG(100, 100);

        then(svg).contains("circle r='50' cx='50' cy='50'");
    }

    @Test
    @DisplayName("SVG: The SVG generated by a drawing without a circle does not contain the string 'circle'")
    void whenADrawingDoesNotHaveACircleThenItsSVGDoesNotHaveCircleInIt()
    {
        final String svg = this.drawing.getSVG(100, 100);
        then(svg).doesNotContain("circle");
    }

    @Test
    @DisplayName("SVG: When a drawing has a tall canvas, a circle fills its width")
    void whenADrawingHasATallCanvasThenACircleFillsItsWidth()
    {
        this.drawing.add(this.shape1);
        final String svg = this.drawing.getSVG(100, 200);

        then(svg).contains("circle r='50'");
    }

    @Test
    @DisplayName("SVG: When a drawing has a wide canvas, a circle fills its height")
    void whenADrawingHasAWideCanvasThenACircleFillsItsHeight()
    {

        this.drawing.add(this.shape1);
        final String svg = this.drawing.getSVG(200, 100);

        then(svg).contains("circle r='50'");
    }

    @Test
    @DisplayName("SVG: When a drawing has two adjacent circles, they are placed accordingly in the SVG (other order)")
    void whenADrawingHasTwoAdjacentCircleThenTheyArePlacedAccordinglyInTheSVGOtherOrder()
    {
        this.shape1.setRightOf(this.shape2);
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        final String svg = this.drawing.getSVG(200, 100);

        then(svg).contains("circle r='50' cx='50' cy='50'");
        then(svg).contains("circle r='50' cx='150' cy='50'");
    }

    @Test
    @DisplayName("SVG: When a drawing has two default Circles, the SVG contains two circles")
    void whenADrawingHasTwoDefaultCirclesThenTheSVGContainsTwoCircles()
    {

        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        final String svg = this.drawing.getSVG(100, 100);
        final int count = StringUtils.countMatches(svg, "circle");

        then(count).isEqualTo(2);
    }

    @Test
    @DisplayName("SVG: When a drawing has two default Circles, they are the same in the SVG")
    void whenADrawingHasTwoDefaultCirclesThenTheyAreTheSameInTheSVG()
    {

        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        final String svg = this.drawing.getSVG(200, 200);

        then(svg).isEqualTo("<?xml version='1.0' standalone='no'?><svg xmlns='http://www.w3.org/2000/svg' width='200' height='200'><circle r='100' cx='100' cy='100' /><circle r='100' cx='100' cy='100' /></svg>");
    }

    @Test
    @DisplayName("SVG: When a square (200) drawing has two adjacent Circles, then the SVG is correct")
    void whenASquare200DrawingHasTwoAdjacentCirclesThenTheSVGIsCorrect()
    {

        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        this.shape2.setRightOf(this.shape1);
        final String svg = this.drawing.getSVG(200, 200);

        then(svg).contains("<circle r='50' cx='50' cy='100' />");
        then(svg).contains("<circle r='50' cx='150' cy='100' />");
    }

    @Test
    @DisplayName("SVG: When a wide drawing has two adjacent circles, they are placed accordingly in the SVG")
    void whenAWideDrawingHasTwoAdjacentCirclesThenTheyArePlacedAccordinglyInTheSVG()
    {
        this.shape2.setRightOf(this.shape1);
        this.drawing.add(this.shape1);
        this.drawing.add(this.shape2);
        final String svg = this.drawing.getSVG(200, 100);

        then(svg).contains("circle r='50' cx='50' cy='50'");
        then(svg).contains("circle r='50' cx='150' cy='50'");
    }

    /**
     * Tests the SVG emitted by Drawings with Circles
     */
    @Nested
    @TestMethodOrder(MethodOrderer.Alphanumeric.class)
    @DisplayName("Unit tests of the SVG generated by Drawings with Circle shapes")
    class SVG
    {
        @Test
        @DisplayName("When a drawing has three horizontally adjacent default circles, then the generated SVG is correct")
        void whenADrawingHasThreeHorizontallyAdjacentDefaultCirclesThenTheGeneratedSVGIsCorrect(@NotNull final BDDSoftAssertions softly)
        {
            CircleDrawingTestPublic.this.drawing.add(CircleDrawingTestPublic.this.shape1);
            CircleDrawingTestPublic.this.drawing.add(CircleDrawingTestPublic.this.shape2);
            CircleDrawingTestPublic.this.shape2.setRightOf(CircleDrawingTestPublic.this.shape1);
            CircleDrawingTestPublic.this.drawing.add(CircleDrawingTestPublic.this.shape3);
            CircleDrawingTestPublic.this.shape3.setRightOf(CircleDrawingTestPublic.this.shape2);
            @NotNull final Integer width = 100;
            @NotNull final Integer height = 100;
            @NotNull final String svg = CircleDrawingTestPublic.this.drawing.getSVG(width, height);

            softly.then(svg).contains("cx='16.666666'");
            softly.then(svg).contains("cx='50'");
            softly.then(svg).contains("cx='83.333336'");
        }

        @Test
        @DisplayName("When a drawing has three vertically adjacent default circles, then the generated SVG is correct")
        void whenADrawingHasThreeVerticallyAdjacentDefaultCirclesThenTheGeneratedSVGIsCorrect(@NotNull final BDDSoftAssertions softly)
        {
            CircleDrawingTestPublic.this.drawing.add(CircleDrawingTestPublic.this.shape1);
            CircleDrawingTestPublic.this.drawing.add(CircleDrawingTestPublic.this.shape2);
            CircleDrawingTestPublic.this.shape2.setAbove(CircleDrawingTestPublic.this.shape1);
            CircleDrawingTestPublic.this.drawing.add(CircleDrawingTestPublic.this.shape3);
            CircleDrawingTestPublic.this.shape3.setAbove(CircleDrawingTestPublic.this.shape2);
            @NotNull final Integer width = 100;
            @NotNull final Integer height = 100;
            @NotNull final String svg = CircleDrawingTestPublic.this.drawing.getSVG(width, height);
            logger.atFine().log(svg);

            softly.then(svg).contains("cy='16.666666'");
            softly.then(svg).contains("cy='50'");
            softly.then(svg).contains("cy='83.333336'");
        }
    }

}
